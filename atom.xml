<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独钓翁</title>
  <subtitle>孤舟蓑笠翁，独钓寒江雪。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://piggsoft.github.io/"/>
  <updated>2017-01-03T08:54:02.131Z</updated>
  <id>http://piggsoft.github.io/</id>
  
  <author>
    <name>等待-希望</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP通讯详解及实战</title>
    <link href="http://piggsoft.github.io/2017/01/03/TCP%E9%80%9A%E8%AE%AF%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
    <id>http://piggsoft.github.io/2017/01/03/TCP通讯详解及实战/</id>
    <published>2017-01-03T06:41:19.000Z</published>
    <updated>2017-01-03T08:54:02.131Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发，测试过程中，特别是在压力测试过程中，用<code>netstat -nat</code>查看，发现客户端出现大量<code>SYN_SENT</code>状态, 服务端出现大量<code>SYN_RCVD</code>状态连接,下面我们一起看下</p>
<ul>
<li>为什么会有这些状态？</li>
<li>出现这些状态原因是什么？</li>
</ul>
<a id="more"></a>
<h2 id="TCP协议模型"><a href="#TCP协议模型" class="headerlink" title="TCP协议模型"></a>TCP协议模型</h2><p><img src="1.png" alt=""></p>
<h3 id="IP和端口"><a href="#IP和端口" class="headerlink" title="IP和端口"></a>IP和端口</h3><p>解决了文章最开始提到的定位的问题。<br>IP在互联网中能唯一标识一台计算机，是每一台计算机的唯一标识（身份证）；网络编程是和远程计算机的通信，所以必须先能定位到远程计算机；IP帮助解决此问题；一台计算机中可能有很多进程，具体和哪一个进程进行通信，这就得靠端口来识别；</p>
<h3 id="TCP和UDP协议"><a href="#TCP和UDP协议" class="headerlink" title="TCP和UDP协议"></a>TCP和UDP协议</h3><ul>
<li>TCP是Tranfer Control Protocol的简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据目的地的时间以及内容的正确性都是不能被保证的传输，双方都可以进行发送或接收操作。</li>
<li>UDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达。</li>
<li>比较：<ul>
<li>UDP：<ul>
<li>每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。</li>
<li>UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。</li>
<li>UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方</li>
</ul>
</li>
<li>TCP：<ul>
<li>面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。</li>
<li>TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。</li>
<li>TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。<ul>
<li>应用数据分割成TCP认为最适合发送的数据块。这部分是通过“MSS”（最大数据包长度）选项来控制的，通常这种机制也被称为一种协商机制，MSS规定了TCP传往另一端的最大数据块的长度。值得注意的是，MSS只能出现在SYN报文段中，若一方不接收来自另一方的MSS值，则MSS就定为536字节。一般来讲，在不出现分段的情况下，MSS值还是越大越好，这样可以提高网络的利用率。</li>
<li>重传机制。设置定时器，等待确认包。</li>
<li>对首部和数据进行校验。</li>
<li>TCP对收到的数据进行排序，然后交给应用层。</li>
<li>TCP的接收端丢弃重复的数据。</li>
<li>TCP还提供流量控制。（通过每一端声明的窗口大小来提供的）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="TCP状态机"><a href="#TCP状态机" class="headerlink" title="TCP状态机"></a>TCP状态机</h2><p><img src="2.jpg" alt=""> </p>
<h3 id="TCP状态图"><a href="#TCP状态图" class="headerlink" title="TCP状态图"></a>TCP状态图</h3><ul>
<li><p>连接建立</p>
<ul>
<li>第一次握手：主机A发送位码为syn＝1,随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li>
<li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1),syn=1,ack=1,随机产生seq=7654321的包</li>
<li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li>
<li>完成三次握手，主机A与主机B开始传送数据。</li>
</ul>
</li>
<li><p>连接关闭, <em>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</em> </p>
<ul>
<li>客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送（报文段4）。</li>
<li>服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1（报文段5）。和SYN一样，一个FIN将占用一个序号。</li>
<li>服务器B关闭与客户端A的连接，发送一个FIN给客户端A（报文段6）。</li>
<li>客户端A发回ACK报文确认，并将确认序号设置为收到序号加1（报文段7）。<br>附上另一张图：<br>!()[3.png]</li>
</ul>
</li>
</ul>
<h3 id="TCP状态"><a href="#TCP状态" class="headerlink" title="TCP状态"></a>TCP状态</h3><ul>
<li><p><strong>CLOSED</strong>： 表示初始状态。</p>
</li>
<li><p><strong>LISTEN</strong>：  表示服务器端的某个SOCKET处于监听状态，可以接受连接了。</p>
</li>
<li><p><strong>SYN_RCVD</strong>： 这个状态表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本 上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。因此这种状态 时，当收到客户端的ACK报文后，它会进入到ESTABLISHED状态。</p>
</li>
<li><p><strong>SYN_SENT</strong>： 这个状态与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。</p>
</li>
<li><p><strong>ESTABLISHED</strong>：表示连接已经建立。</p>
</li>
<li><p><strong>FIN_WAIT_1</strong>： 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别 是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即 进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马 上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。</p>
</li>
<li><p><strong>FIN_WAIT_2</strong>：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</p>
</li>
<li><p><strong>TIME_WAIT</strong>： 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。
　　</p>
</li>
<li><p><strong>CLOSE_WAIT</strong>： 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对 方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。</p>
</li>
<li><p><strong>LAST_ACK</strong>： 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。
　 </p>
</li>
<li><strong>CLOSING</strong>： 这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的 ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什 么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报 文的情况，也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接</li>
</ul>
<h3 id="通讯类型"><a href="#通讯类型" class="headerlink" title="通讯类型"></a>通讯类型</h3><ul>
<li>短连接<ul>
<li>连接 -&gt; 数据传输 -&gt; 关闭连接</li>
</ul>
</li>
<li>长连接，要求长连接在没有数据通信时，定时发送数据包，以维持连接状态，短连接在没有数据传输时直接关闭就行了 长连接需要心跳包维护连接状态<ul>
<li>连接-&gt;数据传输-&gt;保持连接-&gt;数据传输-&gt;保持连接-&gt; …… -&gt;关闭连接</li>
</ul>
</li>
</ul>
<blockquote>
<blockquote>
<p>什么时候用长连接，短连接？<br>长连接主要用于在少数客户端与服务端的频繁通信，因为这时候如果用短连接频繁通信常会发生Socket出错，并且频繁创建Socket连接也是对资源的浪费。<br>但是对于服务端来说，长连接也会耗费一定的资源，需要专门的线程来负责维护连接状态。</p>
</blockquote>
</blockquote>
<ul>
<li><p>同步通讯–报文发送和接收是同步进行，既报文发送后等待接收返回报文。</p>
<ul>
<li>发送数据之后等待接收返回数据。同步方式一般需要考虑超时问题，即报文发上去后不能无限等待，需要设定超时时间，超过该时间发送方不再等待读返回报文，直接通知超时返回。</li>
</ul>
</li>
<li><p>异步通讯–报文发送和接收是分开的，相互独立的，互不影响。这种方式又分两种情况：</p>
<ul>
<li>异步双工：接收和发送在同一个程序中，有两个不同的子进程分别负责发送和接收</li>
<li>异步单工：接收和发送是用两个不同的程序来完成。</li>
</ul>
</li>
</ul>
<h2 id="日常应用"><a href="#日常应用" class="headerlink" title="日常应用"></a>日常应用</h2><p>我们通过了解TCP各个状态，可以排除和定位网络或系统故障时大有帮助。</p>
<h3 id="linux查看tcp的状态命令："><a href="#linux查看tcp的状态命令：" class="headerlink" title="linux查看tcp的状态命令："></a>linux查看tcp的状态命令：</h3><ol>
<li><code>netstat -nat</code>  查看TCP各个状态的数量</li>
<li><code>lsof  -i:port</code>  可以检测到打开套接字的状况</li>
<li><code>tcpdump -iany tcp port 9000</code> 对tcp端口为9000的进行抓包 </li>
</ol>
<h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><p>通过端口监听判断服务启动是否正常<br><code>netstat –an| grep 8080</code></p>
<ol>
<li>例如：提供www服务默认开的是80端口，提供ftp服务默认的端口为21，当提供的服务没有被连接时就处于LISTENING状态。FTP服务启动后首先处于侦听（LISTENING）状态。处于侦听LISTENING状态时，该端口是开放的，等待连接</li>
<li>客户端出现大量SYN_SENT状态<ul>
<li>当请求连接时客户端首先要发送同步信号给要访问的机器，此时状态为SYN_SENT，如果连接成功了就变为ESTABLISHED，正常情况下SYN_SENT状态非常短暂</li>
<li>如果发现有很多SYN_SENT出现，那一般有这么几种情况，一是你要访问的服务器网络不好，二是服务端无法建立连接返回ack</li>
</ul>
</li>
<li>服务端出现大量SYN_RCVD状态连接<ul>
<li>同理SYN_RCVD状态也是非常短暂的，如果大量出现说明有可能遭到了攻击，或者是客户端网络限制</li>
</ul>
</li>
<li>大量的CLOSE-WAIT状态<ul>
<li>被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进CLOSE_WAIT.如果连接不关闭CLOSE_WAIT持续时间会非常长，如果长时间积累，可能会导致系统资源耗尽</li>
</ul>
</li>
<li>发现系统存在大量TIME_WAIT状态的连接,可以修改内核参数解决，修改TIME_WAIT持续时间</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常开发，测试过程中，特别是在压力测试过程中，用&lt;code&gt;netstat -nat&lt;/code&gt;查看，发现客户端出现大量&lt;code&gt;SYN_SENT&lt;/code&gt;状态, 服务端出现大量&lt;code&gt;SYN_RCVD&lt;/code&gt;状态连接,下面我们一起看下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么会有这些状态？&lt;/li&gt;
&lt;li&gt;出现这些状态原因是什么？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://piggsoft.github.io/categories/IT/"/>
    
    
      <category term="TCP IP" scheme="http://piggsoft.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>跟着独钓翁一起学习spring-boot(一)</title>
    <link href="http://piggsoft.github.io/2017/01/03/%E8%B7%9F%E7%9D%80%E7%8B%AC%E9%92%93%E7%BF%81%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0spring-boot(%E4%B8%80)/"/>
    <id>http://piggsoft.github.io/2017/01/03/跟着独钓翁一起学习spring-boot(一)/</id>
    <published>2017-01-03T02:05:41.000Z</published>
    <updated>2017-01-03T02:53:23.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p>
<a id="more"></a>
<p>多年以来，Spring IO平台饱受非议的一点就是大量的XML配置以及复杂的依赖管理。在去年的SpringOne 2GX会议上，Pivotal的CTO Adrian Colyer回应了这些批评，并且特别提到该平台将来的目标之一就是实现免XML配置的开发体验。Boot所实现的功能超出了这个任务的描述，开发人员不仅不再需要编写XML，而且在一些场景中甚至不需要编写繁琐的import语句。在对外公开的beta版本刚刚发布之时，Boot描述了如何使用该框架在140个字符内实现可运行的web应用，从而获得了极大的关注度，该样例发表在tweet上。</p>
<p>然而，Spring Boot并不是要成为Spring IO平台里面众多“Foundation”层项目的替代者。Spring Boot的目标不在于为已解决的问题域提供新的解决方案，而是为平台带来另一种开发体验，从而简化对这些已有技术的使用。对于已经熟悉Spring生态系统的开发人员来说，Boot是一个很理想的选择，不过对于采用Spring技术的新人来说，Boot提供一种更简洁的方式来使用这些技术。</p>
<p>在追求开发体验的提升方面，Spring Boot，甚至可以说整个Spring生态系统都使用到了Groovy编程语言。Boot所提供的众多便捷功能，都是借助于Groovy强大的MetaObject协议、可插拔的AST转换过程以及内置的依赖解决方案引擎所实现的。在其核心的编译模型之中，Boot使用Groovy来构建工程文件，所以它可以使用通用的导入和样板方法（如类的main方法）对类所生成的字节码进行装饰（decorate）。这样使用Boot编写的应用就能保持非常简洁，却依然可以提供众多的功能</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ul>
<li>访问<a href="http://start.spring.io/" target="_blank" rel="external">Spring Initializr</a></li>
<li>选择构建方式Maven，Spring Boot 版本<br>  <img src="1.png" alt=""></li>
<li>填写group，artifact<br>  <img src="2.png" alt=""></li>
<li>选择所需依赖，如果不记得依赖的名称，可以点击<code>Switch to the full version.</code><br>  <img src="3-1.png" alt=""><br>  <img src="3-2.png" alt=""></li>
<li>点击<code>Generate Project</code>， 进行下载。</li>
</ul>
<h2 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h2><ul>
<li>接下压缩包，用你熟悉的ide打开项目</li>
<li>删除<code>mvnw</code>，<code>mvnw.cmd</code>文件和 <code>.mvn</code>目录</li>
<li><p>编写一个Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        response.getWriter().write(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行<code>XXApplication</code>的<code>main</code>方法，访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>，观看到Hello World，即代表成功。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关背景&quot;&gt;&lt;a href=&quot;#相关背景&quot; class=&quot;headerlink&quot; title=&quot;相关背景&quot;&gt;&lt;/a&gt;相关背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://piggsoft.github.io/categories/IT/"/>
    
    
      <category term="Java Spring Spring-Boot" scheme="http://piggsoft.github.io/tags/Java-Spring-Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java进行四则运算</title>
    <link href="http://piggsoft.github.io/2016/03/15/Java%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    <id>http://piggsoft.github.io/2016/03/15/Java进行四则运算/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2017-01-03T01:08:11.984Z</updated>
    
    <content type="html"><![CDATA[<p>更加便捷的进行四则运算，且代码足够简单。<br>一般的逻辑是按照正常人的思路来解析，这样难度太大。<br>转换思路和原理，可以参考将<a href="http://www.nowamagic.net/librarys/veda/detail/2307" target="_blank" rel="external">中缀表达式转化为后缀表达式</a></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.piggsoft;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arithmetic</span> </span>&#123;</div><div class="line">    <span class="comment">//操作符stack</span></div><div class="line">    <span class="keyword">private</span> Stack&lt;String&gt; operator = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">    <span class="comment">//后缀表达式</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; postFix = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Pattern operatorPattern = Pattern.compile(<span class="string">"[\\d\\.]"</span>);</div><div class="line">    <span class="keyword">private</span> Pattern arithmeticPattern = Pattern.compile(<span class="string">"[\\(\\)\\+\\-/\\*]"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//将中缀表达式换为后缀表达式</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        s = replace(s);</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            String temp = s.substring(i, i + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (operatorPattern.matcher(temp).matches()) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (arithmeticPattern.matcher(temp).matches()) &#123;</div><div class="line">                j = process(j, i, s, temp);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">""</span>.equals(temp)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j &lt; s.length()) &#123;</div><div class="line">            postFix.add(s.substring(j, s.length()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">            postFix.add(operator.pop());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">replace</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">"\\s"</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> currentIndex, String str, String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (startIndex != currentIndex) &#123;</div><div class="line">            postFix.add(str.substring(startIndex, currentIndex));</div><div class="line">        &#125;</div><div class="line">        addOperator(word);</div><div class="line">        startIndex = currentIndex + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (startIndex &gt; str.length()) &#123;</div><div class="line">            startIndex = str.length();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> startIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOperator</span><span class="params">(String operator)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"("</span>.equals(operator)) &#123;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">")"</span>.equals(operator)) &#123;</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">                String temp = <span class="keyword">this</span>.operator.pop();</div><div class="line">                <span class="keyword">if</span> (<span class="string">"("</span>.equals(temp)) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    postFix.add(temp);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">                String temp = <span class="keyword">this</span>.operator.peek();</div><div class="line">                <span class="keyword">if</span> (needPop(temp, operator)) &#123;</div><div class="line">                    <span class="keyword">this</span>.postFix.add(<span class="keyword">this</span>.operator.pop());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.operator.add(operator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needPop</span><span class="params">(String inStackTop, String current)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getLevel(current.charAt(<span class="number">0</span>)) &lt;= getLevel(inStackTop.charAt(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">(<span class="keyword">char</span> operator)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (operator) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">compute</span><span class="params">()</span> </span>&#123;</div><div class="line">        Stack&lt;BigDecimal&gt; stack = <span class="keyword">new</span> Stack&lt;BigDecimal&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.postFix.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arithmeticPattern.matcher(postFix.get(i)).matches()) &#123;</div><div class="line">                BigDecimal bd2 = stack.pop();</div><div class="line">                BigDecimal bd1 = stack.pop();</div><div class="line">                BigDecimal temp = compute(postFix.get(i).charAt(<span class="number">0</span>), bd1, bd2);</div><div class="line">                stack.add(temp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                stack.add(<span class="keyword">new</span> BigDecimal(postFix.get(i)));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> BigDecimal <span class="title">compute</span><span class="params">(<span class="keyword">char</span> operator, BigDecimal bd1, BigDecimal bd2)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (operator) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.add(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.subtract(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.multiply(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.divide(bd2);<span class="comment">//应当使用bd1.divide(divisor, scale, roundingMode);</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Arithmetic arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line"></div><div class="line">        arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2 + 1000 - 200 - (100 + 5 - 9 / 3)"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line"></div><div class="line">        arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2 + 1000 - 200 - (100 + 5 - 9 / 3)"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更加便捷的进行四则运算，且代码足够简单。&lt;br&gt;一般的逻辑是按照正常人的思路来解析，这样难度太大。&lt;br&gt;转换思路和原理，可以参考将&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2307&quot;&gt;中缀表达式转化为后缀表达式&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://piggsoft.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://piggsoft.github.io/tags/Java/"/>
    
      <category term="Math" scheme="http://piggsoft.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Windows指定部分IP走VPN通道</title>
    <link href="http://piggsoft.github.io/2015/05/13/Windows%E6%8C%87%E5%AE%9A%E9%83%A8%E5%88%86IP%E8%B5%B0VPN%E9%80%9A%E9%81%93/"/>
    <id>http://piggsoft.github.io/2015/05/13/Windows指定部分IP走VPN通道/</id>
    <published>2015-05-12T16:00:00.000Z</published>
    <updated>2017-01-03T01:54:09.511Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要可能要在机器连接公司的VPN，但一般情况下连了VPN就无法连接到外网了，本文主要是讲解如何在Windows上配置，从而让固定ip走VPN，其余走本地网络。</p>
<a id="more"></a>
<ul>
<li>按照正常流程配置好VPN</li>
<li>在vpn连接属性–&gt;网络–&gt;Internet协议版本4–&gt;属性–&gt;高级–&gt;去掉《在远程网络上使用默认网关》；这样做让所有连接都走本地网络连接，不走vpn。<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></li>
<li><p>连接vpn，获取vpn分配的ip<br>  输入命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt;ipconfig</div></pre></td></tr></table></figure>
<p>  结果如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PPP 适配器 FUIOU VPN 连接: </div><div class="line">连接特定的 DNS 后缀 . . . . . . . : </div><div class="line">IPv4 地址 . . . . . . . . . . . . : 192.168.18.101 </div><div class="line">子网掩码 . . . . . . . . . . . . : 255.255.255.255 </div><div class="line">默认网关. . . . . . . . . . . . . :</div></pre></td></tr></table></figure>
</li>
<li><p>添加route解析</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route add -p 192.168.8.22 mask 255.255.255.255 192.168.18.101 metric 2</div></pre></td></tr></table></figure>
<p>  192.168.8.22 –&gt;想要通过vpn访问的ip<br>  192.168.18.101 –&gt; 上面vpn分配的ip</p>
</li>
<li>在命令行中加入这个命令。使用下面命令进行测试<br>  ping 192.168.8.22<br>至此配置完成，既可以访问外网，又可以访问192.168.8.22这个VPN地址</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要可能要在机器连接公司的VPN，但一般情况下连了VPN就无法连接到外网了，本文主要是讲解如何在Windows上配置，从而让固定ip走VPN，其余走本地网络。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://piggsoft.github.io/categories/IT/"/>
    
    
      <category term="Windows" scheme="http://piggsoft.github.io/tags/Windows/"/>
    
      <category term="VPN" scheme="http://piggsoft.github.io/tags/VPN/"/>
    
  </entry>
  
</feed>
