<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独钓翁</title>
  <subtitle>孤舟蓑笠翁，独钓寒江雪。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://piggsoft.github.io/"/>
  <updated>2017-01-03T02:53:23.234Z</updated>
  <id>http://piggsoft.github.io/</id>
  
  <author>
    <name>等待-希望</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跟着独钓翁一起学习spring-boot(一)</title>
    <link href="http://piggsoft.github.io/2017/01/03/%E8%B7%9F%E7%9D%80%E7%8B%AC%E9%92%93%E7%BF%81%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0spring-boot(%E4%B8%80)/"/>
    <id>http://piggsoft.github.io/2017/01/03/跟着独钓翁一起学习spring-boot(一)/</id>
    <published>2017-01-03T02:05:41.000Z</published>
    <updated>2017-01-03T02:53:23.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p>
<a id="more"></a>
<p>多年以来，Spring IO平台饱受非议的一点就是大量的XML配置以及复杂的依赖管理。在去年的SpringOne 2GX会议上，Pivotal的CTO Adrian Colyer回应了这些批评，并且特别提到该平台将来的目标之一就是实现免XML配置的开发体验。Boot所实现的功能超出了这个任务的描述，开发人员不仅不再需要编写XML，而且在一些场景中甚至不需要编写繁琐的import语句。在对外公开的beta版本刚刚发布之时，Boot描述了如何使用该框架在140个字符内实现可运行的web应用，从而获得了极大的关注度，该样例发表在tweet上。</p>
<p>然而，Spring Boot并不是要成为Spring IO平台里面众多“Foundation”层项目的替代者。Spring Boot的目标不在于为已解决的问题域提供新的解决方案，而是为平台带来另一种开发体验，从而简化对这些已有技术的使用。对于已经熟悉Spring生态系统的开发人员来说，Boot是一个很理想的选择，不过对于采用Spring技术的新人来说，Boot提供一种更简洁的方式来使用这些技术。</p>
<p>在追求开发体验的提升方面，Spring Boot，甚至可以说整个Spring生态系统都使用到了Groovy编程语言。Boot所提供的众多便捷功能，都是借助于Groovy强大的MetaObject协议、可插拔的AST转换过程以及内置的依赖解决方案引擎所实现的。在其核心的编译模型之中，Boot使用Groovy来构建工程文件，所以它可以使用通用的导入和样板方法（如类的main方法）对类所生成的字节码进行装饰（decorate）。这样使用Boot编写的应用就能保持非常简洁，却依然可以提供众多的功能</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ul>
<li>访问<a href="http://start.spring.io/" target="_blank" rel="external">Spring Initializr</a></li>
<li>选择构建方式Maven，Spring Boot 版本<br>  <img src="1.png" alt=""></li>
<li>填写group，artifact<br>  <img src="2.png" alt=""></li>
<li>选择所需依赖，如果不记得依赖的名称，可以点击<code>Switch to the full version.</code><br>  <img src="3-1.png" alt=""><br>  <img src="3-2.png" alt=""></li>
<li>点击<code>Generate Project</code>， 进行下载。</li>
</ul>
<h2 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h2><ul>
<li>接下压缩包，用你熟悉的ide打开项目</li>
<li>删除<code>mvnw</code>，<code>mvnw.cmd</code>文件和 <code>.mvn</code>目录</li>
<li><p>编写一个Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        response.getWriter().write(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行<code>XXApplication</code>的<code>main</code>方法，访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>，观看到Hello World，即代表成功。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关背景&quot;&gt;&lt;a href=&quot;#相关背景&quot; class=&quot;headerlink&quot; title=&quot;相关背景&quot;&gt;&lt;/a&gt;相关背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://piggsoft.github.io/categories/IT/"/>
    
    
      <category term="Java Spring Spring-Boot" scheme="http://piggsoft.github.io/tags/Java-Spring-Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java进行四则运算</title>
    <link href="http://piggsoft.github.io/2016/03/15/Java%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    <id>http://piggsoft.github.io/2016/03/15/Java进行四则运算/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2017-01-03T01:08:11.984Z</updated>
    
    <content type="html"><![CDATA[<p>更加便捷的进行四则运算，且代码足够简单。<br>一般的逻辑是按照正常人的思路来解析，这样难度太大。<br>转换思路和原理，可以参考将<a href="http://www.nowamagic.net/librarys/veda/detail/2307" target="_blank" rel="external">中缀表达式转化为后缀表达式</a></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.piggsoft;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arithmetic</span> </span>&#123;</div><div class="line">    <span class="comment">//操作符stack</span></div><div class="line">    <span class="keyword">private</span> Stack&lt;String&gt; operator = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">    <span class="comment">//后缀表达式</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; postFix = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Pattern operatorPattern = Pattern.compile(<span class="string">"[\\d\\.]"</span>);</div><div class="line">    <span class="keyword">private</span> Pattern arithmeticPattern = Pattern.compile(<span class="string">"[\\(\\)\\+\\-/\\*]"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//将中缀表达式换为后缀表达式</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        s = replace(s);</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            String temp = s.substring(i, i + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (operatorPattern.matcher(temp).matches()) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (arithmeticPattern.matcher(temp).matches()) &#123;</div><div class="line">                j = process(j, i, s, temp);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">""</span>.equals(temp)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j &lt; s.length()) &#123;</div><div class="line">            postFix.add(s.substring(j, s.length()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">            postFix.add(operator.pop());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">replace</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">"\\s"</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> currentIndex, String str, String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (startIndex != currentIndex) &#123;</div><div class="line">            postFix.add(str.substring(startIndex, currentIndex));</div><div class="line">        &#125;</div><div class="line">        addOperator(word);</div><div class="line">        startIndex = currentIndex + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (startIndex &gt; str.length()) &#123;</div><div class="line">            startIndex = str.length();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> startIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOperator</span><span class="params">(String operator)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"("</span>.equals(operator)) &#123;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">")"</span>.equals(operator)) &#123;</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">                String temp = <span class="keyword">this</span>.operator.pop();</div><div class="line">                <span class="keyword">if</span> (<span class="string">"("</span>.equals(temp)) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    postFix.add(temp);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.operator.isEmpty()) &#123;</div><div class="line">                String temp = <span class="keyword">this</span>.operator.peek();</div><div class="line">                <span class="keyword">if</span> (needPop(temp, operator)) &#123;</div><div class="line">                    <span class="keyword">this</span>.postFix.add(<span class="keyword">this</span>.operator.pop());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.operator.add(operator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needPop</span><span class="params">(String inStackTop, String current)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getLevel(current.charAt(<span class="number">0</span>)) &lt;= getLevel(inStackTop.charAt(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">(<span class="keyword">char</span> operator)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (operator) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">compute</span><span class="params">()</span> </span>&#123;</div><div class="line">        Stack&lt;BigDecimal&gt; stack = <span class="keyword">new</span> Stack&lt;BigDecimal&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.postFix.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arithmeticPattern.matcher(postFix.get(i)).matches()) &#123;</div><div class="line">                BigDecimal bd2 = stack.pop();</div><div class="line">                BigDecimal bd1 = stack.pop();</div><div class="line">                BigDecimal temp = compute(postFix.get(i).charAt(<span class="number">0</span>), bd1, bd2);</div><div class="line">                stack.add(temp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                stack.add(<span class="keyword">new</span> BigDecimal(postFix.get(i)));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> BigDecimal <span class="title">compute</span><span class="params">(<span class="keyword">char</span> operator, BigDecimal bd1, BigDecimal bd2)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (operator) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.add(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.subtract(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.multiply(bd2);</div><div class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">                <span class="keyword">return</span> bd1.divide(bd2);<span class="comment">//应当使用bd1.divide(divisor, scale, roundingMode);</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Arithmetic arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line"></div><div class="line">        arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2 + 1000 - 200 - (100 + 5 - 9 / 3)"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line"></div><div class="line">        arithmetic = <span class="keyword">new</span> Arithmetic();</div><div class="line">        arithmetic.parse(<span class="string">"9 + (3 - 1) * 3 + 10 / 2 + 1000 - 200 - (100 + 5 - 9 / 3)"</span>);</div><div class="line">        System.out.println(arithmetic.postFix);</div><div class="line">        System.out.println(arithmetic.compute());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更加便捷的进行四则运算，且代码足够简单。&lt;br&gt;一般的逻辑是按照正常人的思路来解析，这样难度太大。&lt;br&gt;转换思路和原理，可以参考将&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2307&quot;&gt;中缀表达式转化为后缀表达式&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://piggsoft.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://piggsoft.github.io/tags/Java/"/>
    
      <category term="Math" scheme="http://piggsoft.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Windows指定部分IP走VPN通道</title>
    <link href="http://piggsoft.github.io/2015/05/13/Windows%E6%8C%87%E5%AE%9A%E9%83%A8%E5%88%86IP%E8%B5%B0VPN%E9%80%9A%E9%81%93/"/>
    <id>http://piggsoft.github.io/2015/05/13/Windows指定部分IP走VPN通道/</id>
    <published>2015-05-12T16:00:00.000Z</published>
    <updated>2017-01-03T01:54:09.511Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要可能要在机器连接公司的VPN，但一般情况下连了VPN就无法连接到外网了，本文主要是讲解如何在Windows上配置，从而让固定ip走VPN，其余走本地网络。</p>
<a id="more"></a>
<ul>
<li>按照正常流程配置好VPN</li>
<li>在vpn连接属性–&gt;网络–&gt;Internet协议版本4–&gt;属性–&gt;高级–&gt;去掉《在远程网络上使用默认网关》；这样做让所有连接都走本地网络连接，不走vpn。<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></li>
<li><p>连接vpn，获取vpn分配的ip<br>  输入命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt;ipconfig</div></pre></td></tr></table></figure>
<p>  结果如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PPP 适配器 FUIOU VPN 连接: </div><div class="line">连接特定的 DNS 后缀 . . . . . . . : </div><div class="line">IPv4 地址 . . . . . . . . . . . . : 192.168.18.101 </div><div class="line">子网掩码 . . . . . . . . . . . . : 255.255.255.255 </div><div class="line">默认网关. . . . . . . . . . . . . :</div></pre></td></tr></table></figure>
</li>
<li><p>添加route解析</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route add -p 192.168.8.22 mask 255.255.255.255 192.168.18.101 metric 2</div></pre></td></tr></table></figure>
<p>  192.168.8.22 –&gt;想要通过vpn访问的ip<br>  192.168.18.101 –&gt; 上面vpn分配的ip</p>
</li>
<li>在命令行中加入这个命令。使用下面命令进行测试<br>  ping 192.168.8.22<br>至此配置完成，既可以访问外网，又可以访问192.168.8.22这个VPN地址</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要可能要在机器连接公司的VPN，但一般情况下连了VPN就无法连接到外网了，本文主要是讲解如何在Windows上配置，从而让固定ip走VPN，其余走本地网络。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://piggsoft.github.io/categories/IT/"/>
    
    
      <category term="Windows" scheme="http://piggsoft.github.io/tags/Windows/"/>
    
      <category term="VPN" scheme="http://piggsoft.github.io/tags/VPN/"/>
    
  </entry>
  
</feed>
